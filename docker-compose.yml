version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: banking_system
    ports:
      - "3308:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - banking-network

  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - banking-network

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "ruok,stat"
    healthcheck:
      test: ["CMD-SHELL", "echo > /dev/tcp/127.0.0.1/2181"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - banking-network


  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5

    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - banking-network

  # Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

    networks:
      - banking-network

  # Auth Service
  auth-service:
    build:
      context: ./auth-server
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_PRIVATE_KEY_FILE: /run/secrets/jwt_private_key
      JWT_PUBLIC_KEY_FILE: /run/secrets/jwt_public_key
      JWT_EXPIRATION: 3600000
    volumes:
      - ./jwt-secrets/jwt_private.pem:/run/secrets/jwt_private_key:ro
      - ./jwt-secrets/jwt_public.pem:/run/secrets/jwt_public_key:ro
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - banking-network

  # User Service
  user-service:
    build:
      context: ./user-service
    container_name: user-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_PUBLIC_KEY_FILE: /run/secrets/jwt_public_key
    volumes:
      - ./jwt-secrets/jwt_public.pem:/run/secrets/jwt_public_key:ro

    depends_on:
      auth-service:
        condition: service_started
      eureka-server:
        condition: service_healthy
    networks:
      - banking-network

  # Account Service
  account-service:
    build:
      context: ./account-service
    container_name: account-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_PUBLIC_KEY_FILE: /run/secrets/jwt_public_key
    volumes:
      - ./jwt-secrets/jwt_public.pem:/run/secrets/jwt_public_key:ro
    depends_on:
      auth-service:
        condition: service_started
      eureka-server:
        condition: service_healthy
    networks:
      - banking-network

  # Transaction Service
  transaction-service:
    build:
      context: ./transaction-server
    container_name: transaction-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_PUBLIC_KEY_FILE: /run/secrets/jwt_public_key
    volumes:
      - ./jwt-secrets/jwt_public.pem:/run/secrets/jwt_public_key:ro
    depends_on:
      auth-service:
        condition: service_started
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - banking-network

  # Notification Service
  notification-service:
    build:
      context: ./notification-server
    container_name: notification-service
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_PUBLIC_KEY_FILE: /run/secrets/jwt_public_key
    volumes:
      - ./jwt-secrets/jwt_public.pem:/run/secrets/jwt_public_key:ro
    depends_on:
      auth-service:
        condition: service_started
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - banking-network

# Volumes
volumes:
  mysql_data:
  kafka_data:

# Network
networks:
  banking-network:
    driver: bridge
